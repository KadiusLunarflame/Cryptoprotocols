//
// Created by kadius on 03.08.23.
//

#include "lab1/LSX.hpp"

using namespace cipher;

auto
main()
-> int
{
//    BlockVector message{0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x00, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0x0a, 0xff, 0xee, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0x00, 0x00, 0x0a, 0xff, 0xee, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0x11, 0x00, 0x0a, 0xff, 0xee, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22};
//    BlockVector key{0xef, 0xcd, 0xab, 0x89, 0x67, 0x45, 0x23, 0x01, 0x10, 0x32, 0x54, 0x76, 0x98, 0xba, 0xdc, 0xfe, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0x00, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88};
//
//    BlockVector res(8, 0);
//    OMAC(64, message, 16*4, std::move(key),res);
//    for(auto& item: res) {
//        std::cout << std::hex << (int)item << std::endl;
//    }
//
//    std::cout << "done" << std::endl;

    BlockVector key{0xef, 0xcd, 0xab, 0x89, 0x67, 0x45, 0x23, 0x01, 0x10,0x32,0x54,0x76,0x98,0xba, 0xdc, 0xfe, 0x77,0x66,0x55,0x44,0x33,0x22,0x11,0x00,0xff,0xee,0xdd,0xcc,0xbb,0xaa,0x99,0x88};
    LSX cipher(key);
//    BlockVector state{0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff,0x00,0x77,0x66,0x55,0x44,0x33,0x22,0x11};
    BlockVector state{0xcd,0xed,0xd4,0xb9,0x42,0x8d,0x46,0x5a,0x30,0x24,0xbc,0xbe,0x90,0x9d,0x67,0x7f};

//    cipher.E(std::move(state));
//    cipher.show();
    cipher.D(std::move(state));
    cipher.show();

    return 0;
}

