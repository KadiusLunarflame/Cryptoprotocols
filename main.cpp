//
// Created by kadius on 03.08.23.
//

#include "lab4/CRISP.hpp"

#include "lab2/hmac.hpp"

auto
main()
-> int
{
//    BlockVector state{0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff,0x00,0x77,0x66,0x55,0x44,0x33,0x22,0x11};
//    BlockVector key{0xef, 0xcd, 0xab, 0x89, 0x67, 0x45, 0x23, 0x01, 0x10,0x32,0x54,0x76,0x98,0xba, 0xdc, 0xfe, 0x77,0x66,0x55,0x44,0x33,0x22,0x11,0x00,0xff,0xee,0xdd,0xcc,0xbb,0xaa,0x99,0x88};
////    cipher::LSX ciph(std::move(key));
//    BlockVector omac_key{0xef, 0xcd, 0xab, 0x89, 0x67, 0x45, 0x23, 0x01, 0x10,0x32,0x54,0x76,0x98,0xba, 0xdc, 0xfe, 0x77,0x66,0x55,0x44,0x33,0x22,0x11,0x00,0xff,0xee,0xdd,0xcc,0xbb,0xaa,0x99,0x88};
//
//////    BlockVector state{0xcd,0xed,0xd4,0xb9,0x42,0x8d,0x46,0x5a,0x30,0x24,0xbc,0xbe,0x90,0x9d,0x67,0x7f};
//
////    cipher.E(std::move(state));
////    cipher.show();
////    cipher.D();
////    cipher.show();
//
////    std::cout << "==================" << std::endl;
//    crisp_message msg(std::move(state), std::move(key), std::move(omac_key));
//    BlockVector decr_key{0xef, 0xcd, 0xab, 0x89, 0x67, 0x45, 0x23, 0x01, 0x10,0x32,0x54,0x76,0x98,0xba, 0xdc, 0xfe, 0x77,0x66,0x55,0x44,0x33,0x22,0x11,0x00,0xff,0xee,0xdd,0xcc,0xbb,0xaa,0x99,0x88};
//    LSX cipher(msg.PayloadData, std::move(decr_key));
//    cipher.D();
//    cipher.show();

    uint8_t key[32] = {0xef, 0xcd, 0xab, 0x89, 0x67, 0x45, 0x23, 0x01, 0x10,0x32,0x54,0x76,0x98,0xba, 0xdc, 0xfe, 0x77,0x66,0x55,0x44,0x33,0x22,0x11,0x00,0xff,0xee,0xdd,0xcc,0xbb,0xaa,0x99,0x88};
    uint8_t dv_key[32];
    uint8_t salt[32] = {0x00};
    uint8_t IV[32] = {};

    std::string P = "диверсифицированный ключ";
    std::string U = "username: Kadius Lunarflame";
    hmac::kdf2(key, salt, IV, 0, P, U, dv_key);

    for(int i{}; i < 32; ++i) {
        std::cout << std::hex << (int)dv_key[i] << std::endl;
    }

    return 0;
}

